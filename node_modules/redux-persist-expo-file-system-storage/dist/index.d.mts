import { EncodingType } from 'expo-file-system';

/**
 * StorageEngine interface
 *
 * @description Any conforming storage api implementing the following methods:
 * setItem getItem removeItem. (These methods must support promises)
 *
 * @see: {@link https://github.com/rt2zz/redux-persist?tab=readme-ov-file#storage-engines}
 */
interface StorageEngine {
    getItem: (key: string) => Promise<string>;
    setItem: (key: string, value: string) => Promise<void>;
    removeItem: (key: string) => Promise<void>;
}

/**
 * Type definition for a logger function that can be used to log debug and error messages.
 */
type Logger = (message?: unknown, ...optionalParams: unknown[]) => void;

/**
 * Options for configuring the ExpoFileSystemStorage.
 */
interface StorageOptions {
    beforeInit?: () => Promise<void> | void;
    afterInit?: () => Promise<void> | void;
    storagePath?: string;
    encoding?: EncodingType;
    debug?: boolean;
    logger?: {
        debug?: Logger;
        error?: Logger;
    };
}

/**
 * Represents a storage engine that uses Expo FileSystem for persistence.
 */
declare class ExpoFileSystemStorage implements StorageEngine {
    /**
     * The name of the ExpoFileSystemStorage class.
     */
    static name: string;
    /**
     * The options for the ExpoFileSystemStorage class.
     */
    private options;
    /**
     * Set to keep track of already read keys during the current session.
     */
    private readonly readKeys;
    /**
     * Indicates whether the storage has been initialized.
     */
    private isInitialized;
    /**
     * A promise that represents the initialization process of the storage.
     */
    private initializationPromise;
    /**
     * Constructs a new instance of the ExpoFileSystemStorage class.
     * @param customOptions - The custom options for the storage.
     */
    constructor(customOptions?: StorageOptions);
    /**
     * Returns a boolean value indicating whether debug mode is enabled.
     *
     * @returns True if debug mode is enabled, false otherwise.
     */
    private get isDebugModeEnabled();
    /**
     * The logger object used for logging debug and error messages.
     *
     * @returns The logger object.
     */
    private get logger();
    /**
     * Retrieves the value associated with the specified key from the storage.
     *
     * @param key - The key of the item to retrieve.
     * @param onSuccess - Optional callback function to be called with the retrieved content if the operation is successful.
     * @param onFail - Optional callback function to be called if the operation fails.
     * @returns A Promise that resolves to the retrieved content.
     */
    getItem(key: string, onSuccess?: (content: string) => Promise<void> | void, onFail?: (error: Error) => Promise<void> | void): Promise<string>;
    /**
     * Retrieves all the keys stored in the Expo file system storage.
     *
     * @param onSuccess - Optional callback function to be called with the retrieved keys.
     * @param onFail - Optional callback function to be called if an error occurs during retrieval.
     * @returns A promise that resolves to an array of string keys.
     */
    getAllKeys(onSuccess?: (keys: string[]) => Promise<void> | void, onFail?: (error: Error) => Promise<void> | void): Promise<string[]>;
    /**
     * Sets the value for the specified key in the storage.
     *
     * @param key - The key to set the value for.
     * @param value - The value to set.
     * @param onSuccess - Optional callback function to be called when the item is successfully set.
     * @param onFail - Optional callback function to be called when an error occurs while setting the item.
     * @returns A Promise that resolves when the item is successfully set, or rejects with an error if an error occurs.
     */
    setItem(key: string, value: string, onSuccess?: () => Promise<void> | void, onFail?: (error: Error) => Promise<void> | void): Promise<void>;
    /**
     * Removes an item from the storage.
     *
     * @param key - The key of the item to remove.
     * @param onSuccess - Optional callback function to be called when the item is successfully removed.
     * @param onFail - Optional callback function to be called when an error occurs while removing the item.
     * @returns A promise that resolves when the item is removed successfully, or rejects with an error if removal fails.
     */
    removeItem(key: string, onSuccess?: () => Promise<void> | void, onFail?: (error: Error) => Promise<void> | void): Promise<void>;
    /**
     * Clears the storage by deleting the storage path and recreating it.
     *
     * @param onSuccess - Optional callback function to be called after the storage is cleared successfully.
     * @param onFail - Optional callback function to be called if an error occurs while clearing the storage.
     * @returns A promise that resolves when the storage is cleared successfully, or rejects with an error if clearing the storage fails.
     */
    clear(onSuccess?: () => Promise<void> | void, onFail?: (error: Error) => Promise<void> | void): Promise<void>;
    /**
     * Checks if an item with the specified key exists in the storage.
     *
     * @param key - The key of the item to check.
     * @returns A promise that resolves to a boolean indicating whether the item exists or not.
     */
    itemExists(key: string): Promise<boolean>;
    /**
     * Checks if there are any stored items in the storage directory.
     *
     * @returns A promise that resolves to a boolean indicating whether there are stored items or not.
     */
    hasStoredItems(): Promise<boolean>;
    /**
     * Logs all the stored items.
     *
     * @returns A promise that resolves when the logging is complete.
     */
    logStoredItems(): Promise<void>;
    /**
     * Initializes the storage by creating a new directory if it doesn't exist or using an existing directory.
     *
     * @returns A promise that resolves when the initialization is complete.
     */
    private initialize;
    /**
     * Waits for the initialization of the storage.
     * If the storage is already initialized, it returns immediately.
     * If the storage is not yet initialized, it waits for the initialization to complete before returning.
     *
     * @returns A Promise that resolves when the storage is initialized.
     * @throws An error if the initialization has failed.
     */
    private waitForInitialization;
    /**
     * Returns the file path for a given key.
     * Replaces any characters that are not alphanumeric, period, hyphen, or underscore with a hyphen.
     *
     * @param key - The key used to generate the file path.
     * @returns The file path for the given key.
     */
    private pathForKey;
    /**
     * Logs a debug message with optional parameters.
     *
     * @param message - The debug message to log.
     * @param optionalParams - Optional parameters to include in the log message.
     */
    private logDebugMessage;
    /**
     * Logs a debug message if debug mode is enabled.
     *
     * @param message - The debug message to log.
     * @param optionalParams - Optional parameters to include in the log message.
     */
    private logDebugMessageInDebugMode;
    /**
     * Logs an error message with optional parameters.
     *
     * @param message - The error message to log.
     * @param optionalParams - Optional parameters to include in the log.
     */
    private logErrorMessage;
    /**
     * Handles storage errors and logs the error message.
     * If provided, calls the `onFail` function with a new Error object containing the error message.
     * Throws the original error.
     *
     * @param errorMessage - The error message.
     * @param error - The original error object.
     * @param onFail - Optional function to be called when handling the error.
     * @returns A promise that never resolves, as it always throws the original error.
     */
    private handleStorageError;
}
/**
 * Creates an instance of ExpoFileSystemStorage.
 *
 * @param options - The storage options.
 * @returns An instance of ExpoFileSystemStorage.
 */
declare function createExpoFileSystemStorage(options?: StorageOptions): ExpoFileSystemStorage;

export { type Logger, type StorageEngine, type StorageOptions, createExpoFileSystemStorage };
